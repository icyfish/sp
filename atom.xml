<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fish</title>
  
  <subtitle>Live consciously</subtitle>
  <link href="/posts/atom.xml" rel="self"/>
  
  <link href="https://icyfish.github.io/posts/"/>
  <updated>2021-04-16T00:47:33.463Z</updated>
  <id>https://icyfish.github.io/posts/</id>
  
  <author>
    <name>Fish</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>判断元素是否在可视区域</title>
    <link href="https://icyfish.github.io/posts/2019/06/27/element-in-view/"/>
    <id>https://icyfish.github.io/posts/2019/06/27/element-in-view/</id>
    <published>2019-06-26T16:00:00.000Z</published>
    <updated>2021-04-16T00:47:33.463Z</updated>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;initial version:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS定位笔记(MDN)</title>
    <link href="https://icyfish.github.io/posts/2018/02/07/css-position/"/>
    <id>https://icyfish.github.io/posts/2018/02/07/css-position/</id>
    <published>2018-02-06T16:00:00.000Z</published>
    <updated>2019-06-30T13:56:29.883Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;阅读MDN - CSS定位学习笔记&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Ref</title>
    <link href="https://icyfish.github.io/posts/2018/01/18/react-ref/"/>
    <id>https://icyfish.github.io/posts/2018/01/18/react-ref/</id>
    <published>2018-01-17T16:00:00.000Z</published>
    <updated>2019-06-30T13:56:25.091Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;引用某个react UI组件的时候遇到了这样的告警: addComponentAsRefTo(…): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component’s render method, or you have multiple copies of React loaded. &lt;/p&gt;
&lt;p&gt;于是去了解了一下ref的用法:&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Iterators 与 for-of 循环</title>
    <link href="https://icyfish.github.io/posts/2018/01/02/iterators-and-the-for-of-loop/"/>
    <id>https://icyfish.github.io/posts/2018/01/02/iterators-and-the-for-of-loop/</id>
    <published>2018-01-01T16:00:00.000Z</published>
    <updated>2019-06-30T13:56:06.370Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Iterators 与 for-of 循环&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>script error</title>
    <link href="https://icyfish.github.io/posts/2017/12/25/script-error/"/>
    <id>https://icyfish.github.io/posts/2017/12/25/script-error/</id>
    <published>2017-12-24T16:00:00.000Z</published>
    <updated>2019-06-30T13:55:59.803Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;script error 和 JavaScript 中的错误类型&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack tips</title>
    <link href="https://icyfish.github.io/posts/2017/09/12/webpack-tips/"/>
    <id>https://icyfish.github.io/posts/2017/09/12/webpack-tips/</id>
    <published>2017-09-11T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.100Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;观看视频: &lt;a href=&quot;https://www.youtube.com/watch?v=zFoBYfMLUCM&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Totally Tooling Tips: Webpack Tips&lt;/a&gt;笔记, 视频发布时间: 2017-08-11.&lt;/p&gt;
&lt;p&gt;内容大多为性能相关. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Code Snippets</title>
    <link href="https://icyfish.github.io/posts/2017/09/12/code-snippets/"/>
    <id>https://icyfish.github.io/posts/2017/09/12/code-snippets/</id>
    <published>2017-09-11T16:00:00.000Z</published>
    <updated>2019-06-30T13:55:37.003Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;代码片段收集&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Session相关</title>
    <link href="https://icyfish.github.io/posts/2017/08/30/session/"/>
    <id>https://icyfish.github.io/posts/2017/08/30/session/</id>
    <published>2017-08-29T16:00:00.000Z</published>
    <updated>2019-05-05T02:04:59.370Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Session相关知识点(笔记)&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模块模式</title>
    <link href="https://icyfish.github.io/posts/2017/08/24/module-pattern/"/>
    <id>https://icyfish.github.io/posts/2017/08/24/module-pattern/</id>
    <published>2017-08-23T16:00:00.000Z</published>
    <updated>2019-06-30T13:55:23.862Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://toddmotto.com/mastering-the-module-pattern/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mastering the Module Pattern&lt;/a&gt;(2014) &lt;strong&gt;阅读笔记&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CORS</title>
    <link href="https://icyfish.github.io/posts/2017/08/11/CORS/"/>
    <id>https://icyfish.github.io/posts/2017/08/11/CORS/</id>
    <published>2017-08-10T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.101Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;CORS(Cross-Origin Resource Sharing 跨域资源共享)&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动设备300毫秒延迟问题</title>
    <link href="https://icyfish.github.io/posts/2017/08/11/300-ms-delay/"/>
    <id>https://icyfish.github.io/posts/2017/08/11/300-ms-delay/</id>
    <published>2017-08-10T16:00:00.000Z</published>
    <updated>2019-06-30T13:55:04.427Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;过去, 移动端浏览器对于&lt;code&gt;touchend&lt;/code&gt;和&lt;code&gt;click&lt;/code&gt;事件添加了300-350毫秒的延迟, 以检测用户是否要执行两次点击.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[译]JavaScript继承实例</title>
    <link href="https://icyfish.github.io/posts/2017/07/21/js-inheritance-by-example/"/>
    <id>https://icyfish.github.io/posts/2017/07/21/js-inheritance-by-example/</id>
    <published>2017-07-20T16:00:00.000Z</published>
    <updated>2019-06-30T14:00:17.863Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;原文: &lt;a href=&quot;http://2ality.com/2012/01/js-inheritance-by-example.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript inheritance by example&lt;/a&gt;&lt;br&gt;作者: &lt;a href=&quot;http://2ality.com/p/about.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Axel Rauschmayer&lt;/a&gt;&lt;br&gt;原文发布时间: 2012.01.08&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>20行代码实现JavaScript模板引擎</title>
    <link href="https://icyfish.github.io/posts/2017/07/11/implement-js-template-engine/"/>
    <id>https://icyfish.github.io/posts/2017/07/11/implement-js-template-engine/</id>
    <published>2017-07-10T16:00:00.000Z</published>
    <updated>2019-06-30T13:54:45.297Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;刷朋友圈看到了一个不错的题目, 于是Google了一下, 找到一篇文章: &lt;a href=&quot;http://krasimirtsonev.com/blog/article/Javascript-template-engine-in-just-20-line&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript template engine in just 20 lines&lt;/a&gt;, 并不是逐字逐句翻译, 因此算是翻译+笔记吧.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cookie基础</title>
    <link href="https://icyfish.github.io/posts/2017/07/10/cookie-the-basics/"/>
    <id>https://icyfish.github.io/posts/2017/07/10/cookie-the-basics/</id>
    <published>2017-07-09T16:00:00.000Z</published>
    <updated>2019-06-30T13:54:37.891Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;cookie是服务器贴到客户端, 由客户端维护的状态片段, 并在下一次向同一个服务器发送请求时一同发送这段数据. cookie常用于保存用户的登录信息或其他不便于保存在服务器端数据库的size较小的数据. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac下安装npm包出现错误</title>
    <link href="https://icyfish.github.io/posts/2017/07/06/npm-mac-problems/"/>
    <id>https://icyfish.github.io/posts/2017/07/06/npm-mac-problems/</id>
    <published>2017-07-05T16:00:00.000Z</published>
    <updated>2019-06-30T13:54:29.175Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在Mac下安装某些npm包时会返回这样的错误信息:&lt;br&gt;&lt;code&gt;env: node\r: No such file or directory&lt;/code&gt;. 从错误信息的&lt;code&gt;\r&lt;/code&gt;中可以推测出可能是代码行末字符的原因. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>操作DOM</title>
    <link href="https://icyfish.github.io/posts/2017/06/05/dom-manipulation/"/>
    <id>https://icyfish.github.io/posts/2017/06/05/dom-manipulation/</id>
    <published>2017-06-04T16:00:00.000Z</published>
    <updated>2019-06-30T14:07:47.967Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;操作DOM练习, updating…&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>处理数组和字符串</title>
    <link href="https://icyfish.github.io/posts/2017/05/26/dealing-with-string/"/>
    <id>https://icyfish.github.io/posts/2017/05/26/dealing-with-string/</id>
    <published>2017-05-25T16:00:00.000Z</published>
    <updated>2019-06-30T13:54:12.886Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;处理字符串和数组的一些方法(updated at 2017-06-04)&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>相邻兄弟选择器</title>
    <link href="https://icyfish.github.io/posts/2017/05/18/adjacent-sibling/"/>
    <id>https://icyfish.github.io/posts/2017/05/18/adjacent-sibling/</id>
    <published>2017-05-17T16:00:00.000Z</published>
    <updated>2019-06-30T13:53:55.395Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://github.com/orderedlist/minimal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;minimal主题&lt;/a&gt;的样式文件中发现了下面的代码, 对”+”号有点不理解, 于是在《CSS权威指南》里查了一下, 发现这是&lt;strong&gt;相邻兄弟结合符Adjacent Sibling Combinator&lt;/strong&gt;, 也叫 &lt;strong&gt;相邻兄弟选择器&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[译]babel-preset-env</title>
    <link href="https://icyfish.github.io/posts/2017/05/18/babel-preset-env/"/>
    <id>https://icyfish.github.io/posts/2017/05/18/babel-preset-env/</id>
    <published>2017-05-17T16:00:00.000Z</published>
    <updated>2019-06-30T13:54:03.311Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;看了两个webpack2基础的视频教程, 发现两位老师所用的babel-preset的差异, 于是查了一下两者的区别, 看到了一篇相关的文章, 尝试将其翻译. 原文: &lt;a href=&quot;http://2ality.com/2017/02/babel-preset-env.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;babel-preset-env: a preset that configures Babel for you&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Why webpack</title>
    <link href="https://icyfish.github.io/posts/2017/05/15/why-webpack/"/>
    <id>https://icyfish.github.io/posts/2017/05/15/why-webpack/</id>
    <published>2017-05-14T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.099Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;介绍了webpack产生的最主要原因.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack2基础</title>
    <link href="https://icyfish.github.io/posts/2017/05/13/webpack2-basics/"/>
    <id>https://icyfish.github.io/posts/2017/05/13/webpack2-basics/</id>
    <published>2017-05-12T16:00:00.000Z</published>
    <updated>2019-06-30T13:59:29.838Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;webpack简单介绍, webpack-dev-server的使用, css-loader, style-loader, loader与plugin.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[译]热重载与时间旅行调试</title>
    <link href="https://icyfish.github.io/posts/2017/05/01/hot-reloading-time-travel/"/>
    <id>https://icyfish.github.io/posts/2017/05/01/hot-reloading-time-travel/</id>
    <published>2017-04-30T16:00:00.000Z</published>
    <updated>2021-04-16T00:47:00.964Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;原文: &lt;a href=&quot;https://code-cartoons.com/hot-reloading-and-time-travel-debugging-what-are-they-3c8ed2812f35&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hot reloading and time travel debugging&lt;/a&gt;&lt;br&gt;作者: &lt;a href=&quot;https://code-cartoons.com/@linclark&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lin Clark&lt;/a&gt;&lt;br&gt;原文发布时间: 2015.10.21&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[译]看漫画理解Redux</title>
    <link href="https://icyfish.github.io/posts/2017/05/01/redux-cartoon-guide/"/>
    <id>https://icyfish.github.io/posts/2017/05/01/redux-cartoon-guide/</id>
    <published>2017-04-30T16:00:00.000Z</published>
    <updated>2021-04-16T00:47:00.964Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;原文: &lt;a href=&quot;https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A cartoon guide to Redux&lt;/a&gt;&lt;br&gt;作者: &lt;a href=&quot;https://code-cartoons.com/@linclark&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lin Clark&lt;/a&gt;&lt;br&gt;原文发布时间: 2015.10.21&lt;/p&gt;
    
    </summary>
    
      <category term="redux" scheme="https://icyfish.github.io/posts/categories/redux/"/>
    
    
      <category term="redux" scheme="https://icyfish.github.io/posts/tags/redux/"/>
    
      <category term="react" scheme="https://icyfish.github.io/posts/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>[译]看漫画理解Flux</title>
    <link href="https://icyfish.github.io/posts/2017/04/27/flux-cartoon-guide/"/>
    <id>https://icyfish.github.io/posts/2017/04/27/flux-cartoon-guide/</id>
    <published>2017-04-26T16:00:00.000Z</published>
    <updated>2021-04-16T00:47:00.964Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;原文: &lt;a href=&quot;https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A cartoon guide to Flux&lt;/a&gt;&lt;br&gt;作者: &lt;a href=&quot;https://code-cartoons.com/@linclark&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lin Clark&lt;/a&gt;&lt;br&gt;原文发布时间: 2015.09.29&lt;/p&gt;
    
    </summary>
    
      <category term="redux" scheme="https://icyfish.github.io/posts/categories/redux/"/>
    
    
      <category term="redux" scheme="https://icyfish.github.io/posts/tags/redux/"/>
    
      <category term="react" scheme="https://icyfish.github.io/posts/tags/react/"/>
    
      <category term="flux" scheme="https://icyfish.github.io/posts/tags/flux/"/>
    
  </entry>
  
  <entry>
    <title>[译]React为何在前端开发中大放异彩</title>
    <link href="https://icyfish.github.io/posts/2017/04/25/why-react/"/>
    <id>https://icyfish.github.io/posts/2017/04/25/why-react/</id>
    <published>2017-04-24T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.101Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;原文: &lt;a href=&quot;https://medium.freecodecamp.com/yes-react-is-taking-over-front-end-development-the-question-is-why-40837af8ab76&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Yes, React is taking over front-end development. The question is why.&lt;/a&gt;&lt;br&gt;作者: &lt;a href=&quot;https://medium.freecodecamp.com/@samerbuna&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Samer Buna&lt;/a&gt;&lt;br&gt;原文发布时间: 2017.03.31&lt;br&gt;译文同时发布于: &lt;a href=&quot;https://medium.com/@icyfish/%E8%AF%91-react%E4%B8%BA%E4%BD%95%E5%9C%A8%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%AD%E5%A4%A7%E6%94%BE%E5%BC%82%E5%BD%A9-cf48c8d69b21&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Medium&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux-不可变更新</title>
    <link href="https://icyfish.github.io/posts/2017/04/17/redux-avoid-mutation/"/>
    <id>https://icyfish.github.io/posts/2017/04/17/redux-avoid-mutation/</id>
    <published>2017-04-16T16:00:00.000Z</published>
    <updated>2019-07-06T09:46:52.078Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在Redux中, reducer函数遵循&lt;a href=&quot;http://cn.redux.js.org/docs/recipes/reducers/ImmutableUpdatePatterns.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;不可变更新模式&lt;/a&gt;, 而对象和数组在JavaScript中是通过引用传递(pass by reference), 因此如果直接修改对象和数组, 原对象和数组就会改变, 于是我们需要对对象和数组的拷贝进行修改, 下面整理了一些修改时要避免以及推荐使用的方法. &lt;/p&gt;
    
    </summary>
    
      <category term="redux" scheme="https://icyfish.github.io/posts/categories/redux/"/>
    
    
      <category term="redux" scheme="https://icyfish.github.io/posts/tags/redux/"/>
    
      <category term="react" scheme="https://icyfish.github.io/posts/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Redux App - BookList</title>
    <link href="https://icyfish.github.io/posts/2017/04/16/redux-booklist/"/>
    <id>https://icyfish.github.io/posts/2017/04/16/redux-booklist/</id>
    <published>2017-04-15T16:00:00.000Z</published>
    <updated>2019-07-06T09:46:33.835Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;通过创建一个书籍列表app, 学习Redux的一些基础概念以及主要API的运用, 下面是该app的图示: &lt;/p&gt;
    
    </summary>
    
      <category term="redux" scheme="https://icyfish.github.io/posts/categories/redux/"/>
    
    
      <category term="redux" scheme="https://icyfish.github.io/posts/tags/redux/"/>
    
      <category term="react" scheme="https://icyfish.github.io/posts/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>网站视频下载及Mac录屏</title>
    <link href="https://icyfish.github.io/posts/2017/04/15/video-download-record/"/>
    <id>https://icyfish.github.io/posts/2017/04/15/video-download-record/</id>
    <published>2017-04-14T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.098Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;前两天想下载一些B站的视频, 找到了一些相关工具. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux基础</title>
    <link href="https://icyfish.github.io/posts/2017/04/12/redux-basics/"/>
    <id>https://icyfish.github.io/posts/2017/04/12/redux-basics/</id>
    <published>2017-04-11T16:00:00.000Z</published>
    <updated>2019-06-30T13:52:32.562Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Redux是JavaScript应用的状态容器，为应用提供可预测的状态管理, 可以和许多JavaScript库结合使用, 如React, Angular, Ember。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[转]如果互联网被切断，你还可以怎么办？</title>
    <link href="https://icyfish.github.io/posts/2017/04/09/without-internet/"/>
    <id>https://icyfish.github.io/posts/2017/04/09/without-internet/</id>
    <published>2017-04-08T16:00:00.000Z</published>
    <updated>2019-06-30T13:52:24.826Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;即便互联网已无法访问，但每个人的电脑实际上还是互相连接的。换句话说你们仍处于同一个巨型局域网之中，甚至仍有公网IP。所以理论上通过某种方式，你或许能再度利用那些被荒废的网线和电缆。这里有三个方法，你只需要一个U盘：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git常用指令</title>
    <link href="https://icyfish.github.io/posts/2017/03/11/git-commands/"/>
    <id>https://icyfish.github.io/posts/2017/03/11/git-commands/</id>
    <published>2017-03-10T16:00:00.000Z</published>
    <updated>2019-06-30T13:52:19.936Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;学习过程中一些比较经常用到的git指令, 持续更新.&lt;br&gt;(updated at 2017-07-11)&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数组, 栈, 队列</title>
    <link href="https://icyfish.github.io/posts/2017/03/07/array-stack-queue/"/>
    <id>https://icyfish.github.io/posts/2017/03/07/array-stack-queue/</id>
    <published>2017-03-06T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.101Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;利用JavaScript学习基础的数据结构: 数组, 栈, 队列. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>三种基础排序算法</title>
    <link href="https://icyfish.github.io/posts/2017/03/05/sorting-algorithm/"/>
    <id>https://icyfish.github.io/posts/2017/03/05/sorting-algorithm/</id>
    <published>2017-03-04T16:00:00.000Z</published>
    <updated>2019-06-30T13:52:05.159Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;冒泡排序, 插入排序, 选择排序的介绍以及它们的JavaScript代码实现. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>innerText与几种DOM方法</title>
    <link href="https://icyfish.github.io/posts/2017/03/04/innertext-reflow-dom/"/>
    <id>https://icyfish.github.io/posts/2017/03/04/innertext-reflow-dom/</id>
    <published>2017-03-03T16:00:00.000Z</published>
    <updated>2019-06-30T13:51:58.876Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;介绍innerText, textContent, innerHTML的区别, 引起重排的几种情况, 以及几种常用的DOM方法.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初期自学路线</title>
    <link href="https://icyfish.github.io/posts/2017/02/16/learning-web-dev-from-scratch/"/>
    <id>https://icyfish.github.io/posts/2017/02/16/learning-web-dev-from-scratch/</id>
    <published>2017-02-15T16:00:00.000Z</published>
    <updated>2019-06-30T13:51:51.765Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;知乎上有一个问题: &lt;strong&gt;零基础的前端开发初学者应如何系统地学习？&lt;/strong&gt;. 根据这个问题的一些答案了解到了一些前端学习的重点和学习方法, 现在想记录一下自己的学习路线, 在知乎上也做出了&lt;a href=&quot;https://www.zhihu.com/question/19834302/answer/146551344&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;回答&lt;/a&gt;, 下面的内容和回答内容几乎是一样的, 这里做个备份. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用数组方法及其应用</title>
    <link href="https://icyfish.github.io/posts/2016/12/29/array-methods/"/>
    <id>https://icyfish.github.io/posts/2016/12/29/array-methods/</id>
    <published>2016-12-28T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.100Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript中一些较常用, 能提高效率的数组方法.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node相关知识点</title>
    <link href="https://icyfish.github.io/posts/2016/12/13/about-node/"/>
    <id>https://icyfish.github.io/posts/2016/12/13/about-node/</id>
    <published>2016-12-12T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.101Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;学习Node过程中需要了解的一些相关基础概念, 包括文件处理, 网络相关概念, 以及npm的一些知识点.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>异步与事件</title>
    <link href="https://icyfish.github.io/posts/2016/11/29/async-n-event/"/>
    <id>https://icyfish.github.io/posts/2016/11/29/async-n-event/</id>
    <published>2016-11-28T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.099Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;异步与事件队列的初步介绍.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>理解Event Emitter</title>
    <link href="https://icyfish.github.io/posts/2016/11/20/event-emitter/"/>
    <id>https://icyfish.github.io/posts/2016/11/20/event-emitter/</id>
    <published>2016-11-19T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.099Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Node中很多模块都运用了Event Emitter, 以下是对Event Emitter的介绍及在Node中的实现方式, 还介绍了在JavaScript中实现继承的几种方式.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="https://icyfish.github.io/posts/2016/11/15/closure/"/>
    <id>https://icyfish.github.io/posts/2016/11/15/closure/</id>
    <published>2016-11-14T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.099Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;闭包的概念以及相关应用.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>创建对象与原型继承</title>
    <link href="https://icyfish.github.io/posts/2016/11/12/object-creation-prototype/"/>
    <id>https://icyfish.github.io/posts/2016/11/12/object-creation-prototype/</id>
    <published>2016-11-11T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.098Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;继承指使某个对象 &lt;strong&gt;关联&lt;/strong&gt; 另一个对象的属性和方法. 大多数编程语言中运用的继承类型为基于类的继承(Classical Inheritance), 而JavaScript中的继承类型为基于原型的继承(Prototypal Inheritance).&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript知识点在框架中的应用</title>
    <link href="https://icyfish.github.io/posts/2016/11/02/js-frameworks/"/>
    <id>https://icyfish.github.io/posts/2016/11/02/js-frameworks/</id>
    <published>2016-11-01T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.101Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;介绍一些重要的JavaScript知识点在框架中的应用, 不完整, 之后再学习到会继续更新.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>I/O</title>
    <link href="https://icyfish.github.io/posts/2016/10/30/io/"/>
    <id>https://icyfish.github.io/posts/2016/10/30/io/</id>
    <published>2016-10-29T16:00:00.000Z</published>
    <updated>2019-06-30T13:50:37.902Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;学习Node时对I/O的理解有一点困惑, 于是学习并整理了一些相关的知识.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>对象与函数</title>
    <link href="https://icyfish.github.io/posts/2016/10/28/objects-functions/"/>
    <id>https://icyfish.github.io/posts/2016/10/28/objects-functions/</id>
    <published>2016-10-27T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.101Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在JavaScript中, 一切皆对象, 函数也是特殊的对象.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>类型, 运算符</title>
    <link href="https://icyfish.github.io/posts/2016/10/25/types-and-operators/"/>
    <id>https://icyfish.github.io/posts/2016/10/25/types-and-operators/</id>
    <published>2016-10-24T16:00:00.000Z</published>
    <updated>2019-06-30T13:50:13.500Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript的变量类型是动态类型, 因此语言中会有很多强制转换的情况发生. 运算符实际上是一种特殊的函数. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>执行环境, 执行栈, 作用域</title>
    <link href="https://icyfish.github.io/posts/2016/10/15/execution-context/"/>
    <id>https://icyfish.github.io/posts/2016/10/15/execution-context/</id>
    <published>2016-10-14T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.101Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript中执行环境, 执行栈, 作用域的介绍及实例.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Internet基础</title>
    <link href="https://icyfish.github.io/posts/2016/10/12/internet-basics/"/>
    <id>https://icyfish.github.io/posts/2016/10/12/internet-basics/</id>
    <published>2016-10-11T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.099Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;介绍一些网络相关的基础概念, 对经典问题「在浏览器中输入网址敲下回车之后发生了什么」的解答.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>编程语言</title>
    <link href="https://icyfish.github.io/posts/2016/09/11/programming-languages/"/>
    <id>https://icyfish.github.io/posts/2016/09/11/programming-languages/</id>
    <published>2016-09-10T16:00:00.000Z</published>
    <updated>2019-06-30T14:05:17.100Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;编译型语言与解释型语言的区别, 编译器与解释器, 源代码与机器码.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>变量的作用域</title>
    <link href="https://icyfish.github.io/posts/2016/09/02/scope-of-variables/"/>
    <id>https://icyfish.github.io/posts/2016/09/02/scope-of-variables/</id>
    <published>2016-09-01T16:00:00.000Z</published>
    <updated>2019-06-30T13:49:35.562Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;变量的作用域是程序源代码中定义这个变量的区域.全局变量拥有全局作用域,在JavaScript代码中的任何地方都有定义.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript中四种函数调用模式</title>
    <link href="https://icyfish.github.io/posts/2016/08/20/function-invocation/"/>
    <id>https://icyfish.github.io/posts/2016/08/20/function-invocation/</id>
    <published>2016-08-19T16:00:00.000Z</published>
    <updated>2019-06-30T13:49:18.931Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在JavaScript中对函数进行调用有多种方式, 以下是对四种函数调用模式的介绍, 以及call, apply, bind的区别.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
